unit Use_Cli_U;

interface

uses Windows, Forms, SysUtils,
  Use_Concerted_U, Post_Client_Concerted_U, User_Concerted_U, User_Cli_U, Post_Client_Cli_U;

type
  TUse_Cli = class(TUse_Concerted)
  private
  public
    constructor Create(VPost_Client: TPost_Client_Concerted; VUser: TUser_Concerted; VUnitObjects: TObject); override;
    procedure Start; override; //  «‰ÿ·«ﬁ
    procedure Suspend; override; //  ÌÊﬁ› „ƒﬁ «
    procedure Resume; override; //  Ì” √‰›
    procedure StopAndCancel; override; // ≈·€«¡ «·Ã·”…
    procedure Terminate; override; //  Ì‰ÂÏ
    destructor Destroy; override; //  Õ—Ì— „⁄ «·Õ›÷
  end;

implementation

uses Form_Lock_U, Type_U, Data_Module_U,
  Classes_U;

{ TUse_Cli }

constructor TUse_Cli.Create(VPost_Client: TPost_Client_Concerted; VUser: TUser_Concerted; VUnitObjects: TObject);
resourcestring
  String_MessageUseCreate = ' ⁄–— »œ√ «·Ã·”… Œÿ√ ›Ì «·« ’«·';
var
  VRecordUse: TRecordUse;
  VRecordRound: TRecordRound;
begin
  inherited;
  try
    with FConnexion.AThread.Connection do
    begin
      ReadBuffer(VRecordUse, SizeOf(VRecordUse));
      RecordUse := VRecordUse;
      ReadBuffer(VRecordRound, SizeOf(VRecordRound));
      FRound.RecordRound := VRecordRound;
    end;
  except
    on E: Exception do
    begin
      MessageBox(Application.Handle, PChar(String_MessageUseCreate + #13 + E.Message),
        PChar(MsgCaptionError), $180000);
    end; //on E: do
  end;
end;

destructor TUse_Cli.Destroy;
begin
  inherited;

end;

procedure TUse_Cli.Resume;
begin
  inherited;

end;

procedure TUse_Cli.Start;
begin
  inherited;
  if Form_Lock <> nil then
  begin
    FPost_Client.UnLock;
  end; //if Form_Lock <> nil then
end;

procedure TUse_Cli.StopAndCancel;
resourcestring
  MsgText = 'Œÿ√ ⁄‰œ „Õ«Ê·… «·≈€·«ﬁ';
begin
  inherited;
  Cost := Post_Client.Connexion.AThread.Connection.ReadInteger;
  if Form_Lock = nil then
  begin
    try
      FPost_Client.Lock;
      TUnitObjets(FUnitObjets).User.Free;
      FreeAndNil(Self);
    except
      on E: Exception do
      begin
        MessageBox(Application.Handle, PChar(MsgText + #13 + E.Message)
          , PChar(MsgCaptionError), MB_OK + MsgType)
      end;
    end;
  end;

end;

procedure TUse_Cli.Suspend;
begin
  inherited;

end;

procedure TUse_Cli.Terminate;
resourcestring
  MsgText = 'Œÿ√ ⁄‰œ „Õ«Ê·… «·≈€·«ﬁ';
begin
  inherited;
  Cost := FPost_Client.Connexion.AThread.Connection.ReadInteger;
  if Form_Lock = nil then
  begin
    try
      FPost_Client.Connexion.AThread.Synchronize(Form_Lock.Lock_Windows);
      TUnitObjets(FUnitObjets).Use := nil;
      FreeAndNil(Self);
      //FStateUse := suLock;
    except
      on E: Exception do
      begin
        MessageBox(Application.Handle, PChar(MsgText + #13 + E.Message)
          , PChar(MsgCaptionError), MB_OK + MsgType)
      end;
    end;
  end;
end;

end.

